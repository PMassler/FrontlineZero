#pragma kernel MarchCubesInChunk
#include "/MCTables.compute"

static const int numThreads = 8;



struct Triangle {
	float3 vertexC;
	float3 vertexB;
	float3 vertexA;
};

float surfaceLevel;
int chunkSize;
int3 chunkIndex;

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float4> points;

float3 interpolateVerts(float4 v1, float4 v2) {
	float t = (surfaceLevel - v1.w) / (v2.w - v1.w);
	return v1.xyz + t * (v2.xyz - v1.xyz);
}


[numthreads(numThreads, numThreads, numThreads)]
void MarchCubesInChunk(int3 id : SV_DispatchThreadID)
{

	// 8 corners of the current cube assigned to the pointbuffer
	float4 cubeCorners[8] = {
		points[(id.z) * ((chunkSize + 1) * (chunkSize + 1)) + (id.y) * (chunkSize + 1) + (id.x)],
		points[(id.z) * ((chunkSize + 1) * (chunkSize + 1)) + (id.y) * (chunkSize + 1) + (id.x + 1)],
		points[(id.z + 1) * ((chunkSize + 1) * (chunkSize + 1)) + (id.y) * (chunkSize + 1) + (id.x + 1)],
		points[(id.z + 1) * ((chunkSize + 1) * (chunkSize + 1)) + (id.y) * (chunkSize + 1) + (id.x)],
		points[(id.z) * ((chunkSize + 1) * (chunkSize + 1)) + (id.y + 1) * (chunkSize + 1) + (id.x)],
		points[(id.z) * ((chunkSize + 1) * (chunkSize + 1)) + (id.y + 1) * (chunkSize + 1) + (id.x + 1)],
		points[(id.z + 1) * ((chunkSize + 1) * (chunkSize + 1)) + (id.y + 1) * (chunkSize + 1) + (id.x + 1)],
		points[(id.z + 1) * ((chunkSize + 1) * (chunkSize + 1)) + (id.y + 1) * (chunkSize + 1) + (id.x)],
	};

	// binary cornerstates to decimal number for triangulationtable 
	int cubeIndex = 0;

	if (cubeCorners[0].w < surfaceLevel) cubeIndex |= 1;
	if (cubeCorners[1].w < surfaceLevel) cubeIndex |= 2;
	if (cubeCorners[2].w < surfaceLevel) cubeIndex |= 4;
	if (cubeCorners[3].w < surfaceLevel) cubeIndex |= 8;
	if (cubeCorners[4].w < surfaceLevel) cubeIndex |= 16;
	if (cubeCorners[5].w < surfaceLevel) cubeIndex |= 32;
	if (cubeCorners[6].w < surfaceLevel) cubeIndex |= 64;
	if (cubeCorners[7].w < surfaceLevel) cubeIndex |= 128;


	// Create triangles for current cube configuration
	for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3) {
		// Get indices of corner points A and B for each of the three edges
		// of the cube that need to be joined to form the triangle.
		int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
		int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

		int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
		int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

		int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
		int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

		Triangle tri;
		tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
		tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
		tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);
		triangles.Append(tri);
	}

}



